# CareReadmitNet — Predictive Analytics for Hospital Readmission Using EHR Data

# 1. Imports
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, roc_auc_score, confusion_matrix, roc_curve
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# 2. Generate synthetic EHR dataset
np.random.seed(42)
n_samples = 5000

df = pd.DataFrame({
    'age': np.random.randint(20, 90, n_samples),
    'num_prior_admissions': np.random.poisson(1.5, n_samples),
    'length_of_stay': np.random.randint(1, 20, n_samples),
    'num_comorbidities': np.random.randint(0, 5, n_samples),
    'discharge_disposition': np.random.choice(['home', 'rehab', 'other'], n_samples),
    'num_medications': np.random.randint(1, 15, n_samples),
    'lab_result_abnormal_flag': np.random.choice([0,1], n_samples),
    'previous_readmission': np.random.choice([0,1], n_samples)
})

# Target: readmission within 30 days (yes=1, no=0)
def generate_target(row):
    score = 0
    score += (row['num_prior_admissions'] > 2) * 1.5
    score += (row['length_of_stay'] > 7) * 1.0
    score += (row['num_comorbidities'] > 2) * 1.2
    score += (row['discharge_disposition'] == 'rehab') * 0.8
    score += row['previous_readmission'] * 2.0
    score += row['lab_result_abnormal_flag'] * 0.7
    prob = 1 / (1 + np.exp(-score))
    return np.random.rand() < prob

df['readmitted_30days'] = df.apply(generate_target, axis=1).astype(int)

# 3. Define Features & Target
X = df.drop(columns=['readmitted_30days'])
y = df['readmitted_30days']

# 4. Preprocessing: numeric & categorical
num_features = ['age', 'num_prior_admissions', 'length_of_stay', 'num_comorbidities', 'num_medications']
cat_features = ['discharge_disposition']
bin_features = ['lab_result_abnormal_flag', 'previous_readmission']

preprocessor = ColumnTransformer(transformers=[
    ('num', StandardScaler(), num_features),
    ('cat', OneHotEncoder(), cat_features)
], remainder='passthrough')

# 5. Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# 6. Pipeline with Logistic Regression
pipeline = Pipeline([
    ('preproc', preprocessor),
    ('clf', LogisticRegression(max_iter=1000))
])

pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_test)
y_proba = pipeline.predict_proba(X_test)[:,1]

# 7. Evaluation Metrics
print("📊 Classification Report:\n", classification_report(y_test, y_pred))
print("🔍 ROC AUC Score:", roc_auc_score(y_test, y_proba))
print("📉 Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# 8. ROC Curve Plot
fpr, tpr, _ = roc_curve(y_test, y_proba)
plt.figure(figsize=(8,6))
plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc_score(y_test, y_proba):.2f})')
plt.plot([0,1], [0,1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve – CareReadmitNet')
plt.legend()
plt.grid(True)
plt.show()

# 9. Prediction for a new patient
new_patient = pd.DataFrame({
    'age': [68],
    'num_prior_admissions': [4],
    'length_of_stay': [12],
    'num_comorbidities': [3],
    'discharge_disposition': ['rehab'],
    'num_medications': [10],
    'lab_result_abnormal_flag': [1],
    'previous_readmission': [1]
})

readmission_prob = pipeline.predict_proba(new_patient)[0,1]
print(f"\n🧾 Predicted Readmission Probability: {readmission_prob:.2%}")
